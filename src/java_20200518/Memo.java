package java_20200518;

public class Memo {
	public static void main(String[] args) {
		//멤버변수: 인스턴스 변수, static변수가 있다.
		//클래스마다 생성하는 변수는  instance/ 공유할 수 있는 변수는 static/ 상수는 fianl static
		//reference할 때, 새로운객체를 만들려면 new 생성자를 선언해야한다!
		//멤버변수는 public, private, protected, default.
		//protected: 같은패키지에서는 접근이 가능하고, 상속받은 다른패키지에서도 접근이가능하다.
		//local변수(지역변수), 멤버변수
		//매개변수=인수값=파라미터
		//지역변수는 기본적으로 초기화되지 않습니다(default)값이 없기때문에
		//지역변수는 초기화하고 코딩을해야한다.
		
		
		//메소드
		//1.메소드 이름은 소문자로 하는것이 관례
		//2.접근한정자 메서드종류 반환값유형 메서드 이름 파라미터
		//2.[접근한정자] [메서드종류] [반환값유형] [메서드이름] (파라미터)
		//3.반환값이 있을경우 반환할 자료형을 반환값유형에 기술하면 됨!
		//4.반환값이 없을 경우에는 void!
		
		//5.18
		//calendar만드는 과정을 한번더 복습하고
		//메소드를 활용해서 소수들의 합을 구하는 프로그램을 만들어보자!!
		
		//정리.
		/*
		 * 클래스 
		 * 1. 맴버변수(instance, static, final(대문자))
		 * 2. 메서드(instance, static) /static메서드에서 instance변수와 instance메서드를 호출하려면 객체를 생성해야 한다.
		 * 3. 생성자
		 * 
		 * 
		 * 
		 * 다형성(오버로딩) oop:메소드이름을 중첩해서 사용할 수 있다.
		 * *오버로딩
		 * : 하나의 클래스내에서 메서드 이름을 중복해서 사용가능
		 * 1)한클래스내에서 
		 * 2)메서드이름을 중복해서 사용가능
		 * 3)파라미터(매개변수)는 갯수가 다르거나, 갯수가 같으면 자료형이 다르면 됨
		 * 4)반환형과 접근한정자는 옵션
		 * 
		 * 
		 * 캡슐화(encapsulation)
		 * 
		 * call by value & call by reference -  메서드 호출!
		 * 
		 */
	}
	
	
	
}
